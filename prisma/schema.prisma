// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
  SAVINGS
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum ColorTag {
  GREEN
  YELLOW
  CYAN
  NAVY
  RED
  PURPLE
  TURQUOISE
  BROWN
  MAGENTA 
  BLUE
  GREY
  ARMY
  ORANGE
}

model Transaction {
  id                String          @id @default(uuid())
  title             String
  amount            Float
  date              DateTime
  type              TransactionType
  isPaid            Boolean?         @default(true)
  category          String
  senderOrRecipient String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  user   User   @relation("transactionToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  budget   Budget? @relation("transactionToBudget", fields: [budgetId], references: [id], onDelete: Cascade)
  budgetId String?

  pot   Pot?    @relation("transactionToPot", fields: [potId], references: [id], onDelete: Cascade)
  potId String?

  recurringPayment   RecurringPayment? @relation("transactionToRecurringPayment", fields: [recurringPaymentId], references: [id])
  recurringPaymentId String?

  @@index([userId])
  @@index([budgetId])
  @@index([potId])
  @@index([recurringPaymentId])
}

model Budget {
  id       String @id @default(uuid())
  name     String
  maxSpend Float
  colorTag     ColorTag

  user   User   @relation("budgetToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  transactions Transaction[] @relation("transactionToBudget")

  @@index([userId])
}

model Pot {
  id           String @id @default(uuid())
  title        String
  targetAmount Float
  colorTag     ColorTag

  user   User   @relation("potToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  transactions Transaction[] @relation("transactionToPot")

  @@index([userId])
}

model RecurringPayment {
  id        String    @id @default(uuid())
  title     String
  dueDate   DateTime
  amount    Float
  frequency Frequency
  endDate   DateTime?
  canceled  Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user   User   @relation("recurringPaymentToUser", fields: [userId], references: [id], onDelete: Cascade)
  userId String

  transactions Transaction[] @relation("transactionToRecurringPayment")

  @@index([userId])
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  firstName      String
  lastName       String
  profilePicture String?
  hashedPassword String

  transactions      Transaction[]      @relation("transactionToUser")
  budgets           Budget[]           @relation("budgetToUser")
  pots              Pot[]              @relation("potToUser")
  recurringPayments RecurringPayment[] @relation("recurringPaymentToUser")
}
